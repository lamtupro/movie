import MovieSection from '@/src/components/MovieSection';

const pageSize = 20; // 20 phim m·ªói trang

// H√†m fetch th√¥ng tin di·ªÖn vi√™n
const getActress = async (slug: string) => {
  try {
    const res = await fetch(
      `${process.env.STRAPI_API_URL}/api/actresses?filters[slug][$eq]=${slug}`,
      {
        headers: {
          Authorization: `Bearer ${process.env.STRAPI_API_TOKEN}`,
        },
        next: { revalidate: 3600 } }
    );

    if (!res.ok) throw new Error('L·ªói khi l·∫•y d·ªØ li·ªáu di·ªÖn vi√™n');

    const data = await res.json();
    return data.data?.[0] || null; // Tr·∫£ v·ªÅ di·ªÖn vi√™n (n·∫øu c√≥)
  } catch (err) {
    console.error('‚ùå L·ªói fetch di·ªÖn vi√™n:', err);
    return null;
  }
};

// H√†m fetch phim c·ªßa 1 di·ªÖn vi√™n
const getMoviesByActress = async (actressId: number, page: number) => {
  try {
    const res = await fetch(
      `${process.env.STRAPI_API_URL}/api/movies?populate=*&filters[actresses][id][$eq]=${actressId}&sort=createdAt:desc&pagination[page]=${page}&pagination[pageSize]=${pageSize}`,
      { headers: {
        Authorization: `Bearer ${process.env.STRAPI_API_TOKEN}`,
      },
      next: { revalidate: 3600 } }
    );

    if (!res.ok) throw new Error('L·ªói khi l·∫•y danh s√°ch phim');

    const data = await res.json();
    return {
      movies: data.data || [],
      total: data.meta?.pagination?.total || 0,
    };
  } catch (err) {
    console.error('‚ùå L·ªói fetch phim:', err);
    return { movies: [], total: 0 };
  }
};

export default async function ActressPage({
  params,
  searchParams,
}: {
  params: Promise<{ slug: string }>;
  searchParams: Promise<{ page?: string }>;
}) {
  const paramsResolved = await params;
  const searchParamsResolved = await searchParams;

  const currentPage = parseInt(searchParamsResolved.page || '1', 10) || 1;

  const actress = await getActress(paramsResolved.slug);

  if (!actress) {
    return (
      <p className="text-white text-center py-10 text-xl">
        Kh√¥ng t√¨m th·∫•y di·ªÖn vi√™n ho·∫∑c d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i üò¢
      </p>
    );
  }


  const actressId = actress.id;
  const { movies, total } = await getMoviesByActress(actressId, currentPage);

  const totalPages = Math.ceil(total / pageSize);

  if (!movies || movies.length === 0) {
    return (
      <p className="text-white text-center py-10 text-xl">
        Kh√¥ng t√¨m th·∫•y phim n√†o cho di·ªÖn vi√™n n√†y üò¢
      </p>
    );
  }

  return (
    <MovieSection
      title={`Phim c·ªßa ${actress.name || 'Di·ªÖn vi√™n'}`}
      movies={movies}
      currentPage={currentPage}
      totalPages={totalPages}
      basePath={``}
    />
  );
}
